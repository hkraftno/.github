name: Create PR - Golang

on:
  workflow_call:
    inputs:
      go_module_path:
        description: "Go module path, where the go.mod and go.sum are stored. If it is a service repo, it should probably be './service/.', if the module is in the root of the repo, it should be '.'"
        required: true
        type: string
        default: "./service/."
      docker_path:
        description: "Dockerfile path, where the docker-compose and dockerfiles are stored. If it is a service repo, it should probably be './service/.docker"
        required: true
        type: string
        default: "./service/.docker"


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Add SSH Go Module Private Key from organization secrets
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.GO_MODULE_PRIVATE_KEY_BYGE_COMMON }}"
          echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV

      - name: Setup access for private go modules
        run: |
          git config --global url."ssh://git@github.com/".insteadOf https://github.com/

      - name: Build Docker image
        run: |
          cd ${{ inputs.docker_path }}
          docker compose -f docker-compose.production.yml build --build-arg DOCKERFILE=dockerfile.production

      - name: Check if image built successfully
        run: |
          if [ $? -ne 0 ]; then
            echo "Failed to build Docker image"
            exit 1
          fi

  lint-go:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go environment
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Add SSH Go Module Private Key from organization secrets
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.GO_MODULE_PRIVATE_KEY_BYGE_COMMON }}"
          echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV

      - name: Setup access for private go modules
        run: |
          git config --global url."ssh://git@github.com/".insteadOf https://github.com/

      - name: Linting using golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: v1.54

          # Optional: working directory, useful for monorepos
          working-directory: ${{ inputs.go_module_path }}

          # Optional: golangci-lint command line arguments.
          #
          # Note: By default, the `.golangci.yml` file should be at the root of the repository.
          # The location of the configuration file can be changed by using `--config=`
          # args: --timeout=30m --config=/my/path/.golangci.yml --issues-exit-code=0

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true, then all caching functionality will be completely disabled,
          #           takes precedence over all other caching options.
          # skip-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/go/pkg.
          # skip-pkg-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/.cache/go-build.
          # skip-build-cache: true

          # Optional: The mode to install golangci-lint. It can be 'binary' or 'goinstall'.
          # install-mode: "goinstall"


  run-tests-go:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go environment
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Add SSH Go Module Private Key from organization secrets
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.GO_MODULE_PRIVATE_KEY_BYGE_COMMON }}"
          echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV

      - name: Setup access for private go modules
        run: |
          git config --global url."ssh://git@github.com/".insteadOf https://github.com/

      - name: Install dependencies
        run: |
          cd ${{ inputs.go_module_path }}
          go mod download

      - name: Run tests
        run: |
          cd ${{ inputs.go_module_path }}
          go test ./...
